name: Main build and Run check

on:
  push:
    branches:
      - 'main'

jobs:
  build:
    name: Build on Linux
    runs-on: ubuntu-latest
    steps:
      - name: Download CMake and Ninja
        id: cmake_ninja
        shell: cmake -P {0}
        run: |
          set(ninja_version "1.9.0")
          set(cmake_version "3.16.2")

          message(STATUS "Using host CMake version: ${CMAKE_VERSION}")
          set(ninja_suffix "linux.zip")
          set(cmake_suffix "Linux-x86_64.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-Linux-x86_64/bin")

          set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
          file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)

          set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
          file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)

          # Save the path for other steps
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
          message("::set-output name=cmake_dir::${cmake_dir}")
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: '0'
      - name: Configure
        shell: cmake -P {0}
        run: |
          set(ENV{CC} "gcc")
          set(ENV{CXX} "g++")

          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/ninja" ninja_program)

          execute_process(
            COMMAND ${{ steps.cmake_ninja.outputs.cmake_dir }}/cmake
              -S .
              -B build
              -D CMAKE_BUILD_TYPE=Release
              -G Ninja
              -D CMAKE_MAKE_PROGRAM=${ninja_program}
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()
      - name: Build
        shell: cmake -P {0}
        run: |
          set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")

          execute_process(
            COMMAND ${{ steps.cmake_ninja.outputs.cmake_dir }}/cmake --build build
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()
      - name: Run app
        run: echo "Run program"
#      - name: Run tests
#        shell: cmake -P {0}
#        run: |
#          include(ProcessorCount)
#          ProcessorCount(N)
#
#          execute_process(
#            COMMAND ${{ steps.cmake_and_ninja.outputs.cmake_dir }}/ctest -j ${N}
#            WORKING_DIRECTORY build
#            RESULT_VARIABLE result
#          )
#          if (NOT result EQUAL 0)
#            message(FATAL_ERROR "Running tests failed!")
#          endif()